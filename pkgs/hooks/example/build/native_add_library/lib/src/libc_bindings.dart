// Copyright (c) 2023, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

@ffi.Native<ffi.Int64 Function(ffi.Pointer<ffi.Char>, ffi.Int64, ffi.Int64)>(
    symbol: 'my_open')
external int open(
  ffi.Pointer<ffi.Char> pathname,
  int flags,
  int mode,
);

@ffi.Native<ffi.Int64 Function(ffi.Pointer<DIR>)>(symbol: 'my_closedir')
external int closedir(
  ffi.Pointer<DIR> d,
);

@ffi.Native<ffi.Pointer<DIR> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'my_opendir')
external ffi.Pointer<DIR> opendir(
  ffi.Pointer<ffi.Char> path,
);

@ffi.Native<ffi.Pointer<dirent> Function(ffi.Pointer<DIR>)>(
    symbol: 'my_readdir')
external ffi.Pointer<dirent> readdir(
  ffi.Pointer<DIR> d,
);

@ffi.Native<ffi.Int64 Function(ffi.Pointer<ffi.Char>, ffi.Pointer<Stat>)>(
    symbol: 'my_stat')
external int stat(
  ffi.Pointer<ffi.Char> path,
  ffi.Pointer<Stat> buf,
);

@ffi.Native<ffi.Int64>()
external final int my_UNDEFINED;

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_UF_HIDDEN')
external int get_UF_HIDDEN();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_IFMT')
external int get_S_IFMT();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_IEXEC')
external int get_S_IEXEC();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_IFBLK')
external int get_S_IFBLK();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_IFCHR')
external int get_S_IFCHR();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_IFDIR')
external int get_S_IFDIR();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_IFIFO')
external int get_S_IFIFO();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_IFLNK')
external int get_S_IFLNK();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_IFREG')
external int get_S_IFREG();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_IFSOCK')
external int get_S_IFSOCK();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_IFWHT')
external int get_S_IFWHT();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_IREAD')
external int get_S_IREAD();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_IRGRP')
external int get_S_IRGRP();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_IROTH')
external int get_S_IROTH();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_IRUSR')
external int get_S_IRUSR();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_IRWXG')
external int get_S_IRWXG();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_IRWXO')
external int get_S_IRWXO();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_IRWXU')
external int get_S_IRWXU();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_ISGID')
external int get_S_ISGID();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_ISTXT')
external int get_S_ISTXT();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_ISUID')
external int get_S_ISUID();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_ISVTX')
external int get_S_ISVTX();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_IWGRP')
external int get_S_IWGRP();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_IWOTH')
external int get_S_IWOTH();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_IWRITE')
external int get_S_IWRITE();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_IWUSR')
external int get_S_IWUSR();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_IXGRP')
external int get_S_IXGRP();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_IXOTH')
external int get_S_IXOTH();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_S_IXUSR')
external int get_S_IXUSR();

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_get_UF_APPEND')
external int get_UF_APPEND();

final class dirent extends ffi.Struct {
  @ffi.Int64()
  external int d_ino;

  @ffi.Array.multi([512])
  external ffi.Array<ffi.Char> d_name;
}

final class DIR extends ffi.Struct {
  external dirent my_dirent;

  external ffi.Pointer<ffi.Void> _dir;
}

final class timespec extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int64()
  external int tv_nsec;
}

final class Stat extends ffi.Struct {
  @ffi.Int64()
  external int st_dev;

  @ffi.Int64()
  external int st_ino;

  @ffi.Int64()
  external int st_mode;

  @ffi.Int64()
  external int st_nlink;

  @ffi.Int64()
  external int std_uid;

  external timespec st_atim;

  external timespec st_mtim;

  external timespec st_ctim;

  /// Only valid on macOS/iOS
  external timespec st_btime;

  /// Only valid on macOS/iOS
  @ffi.Int64()
  external int st_flags;
}

const int my_UNDEFINED$1 = 9223372036854775807;
